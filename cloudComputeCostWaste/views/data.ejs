<!DOCTYPE html>
<% include templates/head.ejs %>
<head>
	<link rel="stylesheet" href="/stylesheets/index.css">
	<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<script>
        var dataPackage = <%- JSON.stringify(dataPackage) %>;
</script>
<html lang="en">
	<% include templates/sidebars.ejs %>
    <!-- Use any element to open the sidenav -->
		
	<!-- Add all page content inside this div if you want the side nav to push page content to the right (not used if you only want the sidenav to sit on top of the page -->
	<div id="wrapper">
		<div id = "page-content-wrapper">
            <div class="container-fluid">
            	<% for(var i = 0; i < dataPackage.length; ++i) {%>
            		<% if(dataPackage[i].uuidList.length) {%>
						<div class="row">
							<div id="welcome-column" class="col-lg">
								<h4> <%- dataPackage[i].imageName %> </h4>
								<div id="<%- dataPackage[i].imageName %>" style="height:250px;"></div>
							</div>
						</div>
					<% } %> 
					<div class="row">
						<% for(var j = 0; j < dataPackage[i].uuidList.length; ++j) {%>
							<div id="info-column" class="col-sm">
					    		<ul>
					    			<p> <%- dataPackage[i].uuidList[j].uuid %> <p>
					    			<p> Alive? : <%- dataPackage[i].uuidList[j].alive %> <p>
					    			<p>Total Uptime : <%- dataPackage[i].uuidList[j].uptime %> seconds <p>
					    			<p>Total Idletime : <%- dataPackage[i].uuidList[j].idletime %> seconds <p>
					    			<% if(dataPackage[i].uuidList[j].billing_unit != null && dataPackage[i].uuidList[j].price_hour != null) {%>
						    			<p>Total Cost : <%- parseFloat((dataPackage[i].uuidList[j].cost).toFixed(4)) %>$ <p>
						    			<p>Total Waste : <%- parseFloat(((dataPackage[i].uuidList[j].idletime / dataPackage[i].uuidList[j].billing_unit) 
						    				* dataPackage[i].uuidList[j].price_hour + 
						    				dataPackage[i].uuidList[j].btu_waste).toFixed(4)) %>$ <p>
					    			<% } %>
					    			<p>Average CPU Usage:<%- dataPackage[i].uuidList[j].avgCPU %></p>
					    			<p>Average MEMORY Usage:<%- dataPackage[i].uuidList[j].avgMEM %></p>
					    			<p>Average DISK Usage:<%- dataPackage[i].uuidList[j].avgDISK %></p>
		                    	</ul>
		                    	<div id="<%- dataPackage[i].uuidList[j].uuid %>util" style="height:250px;"></div>
		                    	<br>
		                    	<div id="<%- dataPackage[i].uuidList[j].uuid %>waste" style="height:250px;"></div>
		                    	<br>
		                    </div>
	                	<% } %> 
					</div>	
				<% } %>
			</div>
		</div>
	</div>
	<script>
		function toDateTime(secs) {
		    var t = new Date(1970, 0, 1); // Epoch
		    t.setSeconds(secs);
		    return t;
		};

		function compareTimes(a, b) {
			if (a.time < b.time)
		    	return -1;
		  	if (a.time > b.time)
		    	return 1;
		  	return 0;
		}

		function generateAxis(image) {
			let traces = [];
			let bucket = [];
			for(let i = 0; i < image.uuidList.length; ++i) {
				let name = image.uuidList[i].type;
				if(traces.map(function(e) { return e.name; }).indexOf(name) < 0) { //don't already have this type so push it
					//console.log("Found a new one " + name);
					traces.push({
						name: name,
						x: [],
						y: [],
						type: 'bar'
					});
					bucket.push({
						name: name,
						btu: image.uuidList[i].billing_unit,
						data: []
					});
				}
				let location = bucket.map(function(e) { return e.name; }).indexOf(name);
				for(let j = 0; j < image.uuidList[i].cost_at_btu.length; ++j) {
					//console.log("pushed item to bucket");
					bucket[location].data.push(image.uuidList[i].cost_at_btu[j]);
				}
			}
			//console.log(bucket[0].data);
			for(let i = 0; i < bucket.length; ++i) {
				bucket[i].data.sort(compareTimes);
				let btu_window = bucket[i].btu;
				let btu_start = 0;
				let cost = 0;
				let location = traces.map(function(e) { return e.name; }).indexOf(bucket[i].name);
				//console.log(location);
				for(let j = 0; j < bucket[i].data.length; ++j) {
					//console.log(bucket[i].data[j].time);
					if(btu_start == 0){
						btu_start = bucket[i].data[j].time;
					}
					if(bucket[i].data[j].time - btu_start >= btu_window) {
						//console.log("pushing " + toDateTime(btu_start));
						traces[location].y.push(cost);
						traces[location].x.push(toDateTime(btu_start - btu_window) + " until " + toDateTime(btu_start));
						btu_start = bucket[i].data[j].time;
						//cost = 0;
					}
					cost += bucket[i].data[j].cost_at_time_point;
					//console.log("adding " + cost);
				}
				if(bucket[i].data[bucket[i].data.length - 1].time - btu_start <= btu_window) {
					//console.log("pushing " + toDateTime(btu_start));
					traces[location].y.push(cost);
					traces[location].x.push(toDateTime(btu_start - btu_window) + " until " + toDateTime(btu_start));
					//cost = 0;
				}
				//console.log("pushing " + toDateTime(btu_start))
			}

			return traces;
		};
		for(var i = 0; i < dataPackage.length; ++i) {
			//STACKED BAR PLOT
			if(dataPackage[i].uuidList.length) {
				var TESTER = document.getElementById(dataPackage[i].imageName);
				var traces = generateAxis(dataPackage[i]);
				Plotly.newPlot(TESTER, traces, {title: 'Total Cost Accrued', barmode: 'stack'});
			}

			for(var j = 0; j < dataPackage[i].uuidList.length; ++j) {
				// UTILIZATION PLOT
				var data = [];
				var TESTER = document.getElementById(dataPackage[i].uuidList[j].uuid + "util");
				var WIDTH = document.getElementById("info-column").clientwidth;
				var x_axis = [];
				var y_axis = [];
				for(var k = 0; k < dataPackage[i].uuidList[j].data.length; ++k) {
					x_axis.push(toDateTime(dataPackage[i].uuidList[j].data[k].time));
					y_axis.push([
						dataPackage[i].uuidList[j].data[k].cpu,
						dataPackage[i].uuidList[j].data[k].mem,
						dataPackage[i].uuidList[j].data[k].disk
					]);
				}
				var scatterNames = ["CPU", "MEM", "DISK"];
				for(var m = 0; m < scatterNames.length; ++m) {
					var data_y_axis = [];
					for(var n = 0; n < y_axis.length; ++n) {
						data_y_axis.push(y_axis[n][m]);
					}
					data.push({
						x: x_axis,
						y: data_y_axis,
						name: scatterNames[m],
						type: "scatter"
					});
				}
				var layout = {
					title: "Usage Statistics",
					width: WIDTH,
					yaxis: {
					    title: "USAGE %",
					    titlefont: {color: "#1f77b4"},
					    tickfont: {color: "#1f77b4"}
					},
				  	yaxis2: {
					    title: "MEM",
					    titlefont: {color: "#ff7f0e"},
					    tickfont: {color: "#ff7f0e"},
					    anchor: "free",
					    overlaying: "y",
					    side: "left",
					    position: 0.15
				  	},
				  	yaxis3: {
					    title: "DISK",
					    titlefont: {color: "#d62728"},
					    tickfont: {color: "#d62728"},
					    anchor: "x",
					    overlaying: "y",
					    side: "left",
					    position: 0.85
				  	},
				  	margin: {
					    l: 50,
					    r: 50,
					    b: 50,
					    t: 50,
					    pad: 4
				  	}
				};
				Plotly.plot( TESTER, data, layout );

				//WASTE DONUT CHART
				var TESTER = document.getElementById(dataPackage[i].uuidList[j].uuid + "waste");
				var idle_time = (dataPackage[i].uuidList[j].idletime / dataPackage[i].uuidList[j].billing_unit)* dataPackage[i].uuidList[j].price_hour;
				var btu_waste = dataPackage[i].uuidList[j].btu_waste;
				var efficient_time = dataPackage[i].uuidList[j].cost - ((dataPackage[i].uuidList[j].idletime / dataPackage[i].uuidList[j].billing_unit) * dataPackage[i].uuidList[j].price_hour) - dataPackage[i].uuidList[j].btu_waste;
				var data = [{
				  	values: [efficient_time, idle_time, btu_waste],
				  	labels: ['Efficient Time', 'Idle Time Waste', 'BTU Waste'],
				  	name: 'As a percentage of total cost',
				  	hoverinfo: 'label+percent+name',
				  	hole: .4,
				  	type: 'pie'
				}];

				var layout = {
				  	title: 'Waste Totals',
				  	annotations:
				    [{
				      	font: {
				        	size: 12
				      	},
				      	showarrow: false,
				      	text: 'Waste: ' + Math.round(((idle_time + btu_waste) / dataPackage[i].uuidList[j].cost) * 100) + '%',
				      	x: 0.5,
				      	y: 0.5
				    }],
				  	height: 250,
				  	width: WIDTH,
				  	margin: {
					    l: 0,
					    r: 0,
					    b: 20,
					    t: 30,
					    pad: 2
				  	}
				};

				Plotly.newPlot(TESTER, data, layout);
			}
		}
	</script>
</html>